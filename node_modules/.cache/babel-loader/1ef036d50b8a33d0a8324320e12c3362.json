{"ast":null,"code":"var _jsxFileName = \"/Users/saifal-dinali/Desktop/Projects/React Projects/StudentBoard/StudentBoard/src/App.js\";\nimport React, { Component } from 'react';\nimport Scheduler from './components/Scheduler';\nimport './App.css';\nimport Toolbar from './components/Toolbar';\nimport MessageArea from './components/MessageArea';\nconst data = [{\n  start_date: '2020-06-10 6:00',\n  end_date: '2020-06-10 8:00',\n  text: 'Event 1',\n  id: 1\n}, {\n  start_date: '2020-06-13 10:00',\n  end_date: '2020-06-13 18:00',\n  text: 'Event 2',\n  id: 2\n}, {\n  start_date: '2020-06-13 10:00',\n  end_date: '2020-06-15 5:00',\n  text: 'Event 3',\n  id: 3\n}];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentTimeFormatState: true,\n      messages: [\"New task\", \"Another task\"]\n    };\n\n    this.logDataUpdate = (action, ev, id) => {\n      const text = ev && ev.text ? ` (${ev.text})` : '';\n      const message = `event ${action}: ${id} ${text}`;\n      this.addMessage(message);\n    };\n\n    this.handleTimeFormatStateChange = state => {\n      this.setState({\n        currentTimeFormatState: state\n      });\n    };\n  }\n\n  addMessage(message) {\n    const maxLogLength = 10;\n    const newMessage = {\n      message\n    };\n    const messages = [newMessage, ...this.state.messages];\n\n    if (messages.length > maxLogLength) {\n      messages.length = maxLogLength;\n    }\n\n    this.setState({\n      messages\n    });\n  }\n\n  render() {\n    const {\n      currentTimeFormatState,\n      messages\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tool-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      timeFormatState: currentTimeFormatState,\n      onTimeFormatStateChange: this.handleTimeFormatStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scheduler-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Scheduler, {\n      events: data,\n      timeFormatState: currentTimeFormatState,\n      onDataUpdated: this.logDataUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(MessageArea, {\n      messages: messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/saifal-dinali/Desktop/Projects/React Projects/StudentBoard/StudentBoard/src/App.js"],"names":["React","Component","Scheduler","Toolbar","MessageArea","data","start_date","end_date","text","id","App","state","currentTimeFormatState","messages","logDataUpdate","action","ev","message","addMessage","handleTimeFormatStateChange","setState","maxLogLength","newMessage","length","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,MAAMC,IAAI,GAAG,CACX;AAAEC,EAAAA,UAAU,EAAE,iBAAd;AAAiCC,EAAAA,QAAQ,EAAE,iBAA3C;AAA8DC,EAAAA,IAAI,EAAE,SAApE;AAA+EC,EAAAA,EAAE,EAAE;AAAnF,CADW,EAEX;AAAEH,EAAAA,UAAU,EAAE,kBAAd;AAAkCC,EAAAA,QAAQ,EAAE,kBAA5C;AAAgEC,EAAAA,IAAI,EAAE,SAAtE;AAAiFC,EAAAA,EAAE,EAAE;AAArF,CAFW,EAGX;AAAEH,EAAAA,UAAU,EAAE,kBAAd;AAAkCC,EAAAA,QAAQ,EAAE,iBAA5C;AAA+DC,EAAAA,IAAI,EAAE,SAArE;AAAgFC,EAAAA,EAAE,EAAE;AAApF,CAHW,CAAb;;AAMA,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BU,KAD0B,GAClB;AACNC,MAAAA,sBAAsB,EAAE,IADlB;AAENC,MAAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,cAAb;AAFJ,KADkB;;AAAA,SAmB1BC,aAnB0B,GAmBV,CAACC,MAAD,EAASC,EAAT,EAAaP,EAAb,KAAoB;AAClC,YAAMD,IAAI,GAAGQ,EAAE,IAAIA,EAAE,CAACR,IAAT,GAAiB,KAAIQ,EAAE,CAACR,IAAK,GAA7B,GAAkC,EAA/C;AACA,YAAMS,OAAO,GAAI,SAAQF,MAAO,KAAIN,EAAG,IAAGD,IAAK,EAA/C;AACA,WAAKU,UAAL,CAAgBD,OAAhB;AACD,KAvByB;;AAAA,SAyB1BE,2BAzB0B,GAyBKR,KAAD,IAAW;AACvC,WAAKS,QAAL,CAAc;AACZR,QAAAA,sBAAsB,EAAED;AADZ,OAAd;AAGD,KA7ByB;AAAA;;AAK1BO,EAAAA,UAAU,CAACD,OAAD,EAAU;AAClB,UAAMI,YAAY,GAAG,EAArB;AACA,UAAMC,UAAU,GAAG;AAAEL,MAAAA;AAAF,KAAnB;AACA,UAAMJ,QAAQ,GAAG,CACfS,UADe,EAEf,GAAG,KAAKX,KAAL,CAAWE,QAFC,CAAjB;;AAKA,QAAIA,QAAQ,CAACU,MAAT,GAAkBF,YAAtB,EAAoC;AAClCR,MAAAA,QAAQ,CAACU,MAAT,GAAkBF,YAAlB;AACD;;AACD,SAAKD,QAAL,CAAc;AAAEP,MAAAA;AAAF,KAAd;AACD;;AAaDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA,sBAAF;AAA0BC,MAAAA;AAA1B,QAAuC,KAAKF,KAAlD;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AACE,MAAA,eAAe,EAAEC,sBADnB;AAEE,MAAA,uBAAuB,EAAE,KAAKO,2BAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAOE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,MAAM,EAAEd,IADV;AAEE,MAAA,eAAe,EAAEO,sBAFnB;AAGE,MAAA,aAAa,EAAE,KAAKE,aAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,eAcE,oBAAC,WAAD;AACE,MAAA,QAAQ,EAAED,QADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,CADF;AAoBD;;AApDyB;;AAsD5B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Scheduler from './components/Scheduler';\nimport './App.css';\nimport Toolbar from './components/Toolbar';\nimport MessageArea from './components/MessageArea';\n\nconst data = [\n  { start_date: '2020-06-10 6:00', end_date: '2020-06-10 8:00', text: 'Event 1', id: 1 },\n  { start_date: '2020-06-13 10:00', end_date: '2020-06-13 18:00', text: 'Event 2', id: 2 },\n  { start_date: '2020-06-13 10:00', end_date: '2020-06-15 5:00', text: 'Event 3', id: 3 }\n];\n\nclass App extends Component {\n  state = {\n    currentTimeFormatState: true,\n    messages: [\"New task\", \"Another task\"]\n  };\n  addMessage(message) {\n    const maxLogLength = 10;\n    const newMessage = { message };\n    const messages = [\n      newMessage,\n      ...this.state.messages\n    ];\n\n    if (messages.length > maxLogLength) {\n      messages.length = maxLogLength;\n    }\n    this.setState({ messages });\n  }\n\n  logDataUpdate = (action, ev, id) => {\n    const text = ev && ev.text ? ` (${ev.text})` : '';\n    const message = `event ${action}: ${id} ${text}`;\n    this.addMessage(message);\n  }\n\n  handleTimeFormatStateChange = (state) => {\n    this.setState({\n      currentTimeFormatState: state\n    });\n  }\n  render() {\n    const { currentTimeFormatState, messages } = this.state;\n    return (\n      <div>\n        <div className=\"tool-bar\">\n          <Toolbar\n            timeFormatState={currentTimeFormatState}\n            onTimeFormatStateChange={this.handleTimeFormatStateChange}\n          />\n        </div>\n        <div className='scheduler-container'>\n          <Scheduler\n            events={data}\n            timeFormatState={currentTimeFormatState}\n            onDataUpdated={this.logDataUpdate}\n          />\n        </div>\n        <MessageArea\n          messages={messages}\n        />\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}